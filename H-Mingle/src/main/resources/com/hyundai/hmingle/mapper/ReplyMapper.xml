<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hyundai.hmingle.mapper.ReplyMapper">

    <resultMap id="replyResultMap" type="reply">
        <id property="id" column="id"/>
        <result property="content" column="content"/>
        <result property="depth" column="depth"/>
        <collection property="member" ofType="member" resultMap="memberResultMap"/>
    </resultMap>

    <resultMap id="memberResultMap" type="member">
        <id property="id" column="member_id"/>
    </resultMap>

    <select id="findById" parameterType="long" resultMap="replyResultMap">
        select id, content, depth, member_id
        from reply
        where id = #{id}
    </select>

    <select id="findSaved" parameterType="long" resultType="replyCreateMapperResponse">
        select r.id as id, content, depth, member_id, nickname, r.created_date as createdDate, m.image_url as imageUrl
        from reply r
        join member m
            on r.member_id = m.id
        where r.id = #{replyId} and r.removed = 0
    </select>

    <select id="findAllByPostId" parameterType="long" resultType="reply">
        select id
        from reply
        where post_id = #{id} and removed = 0
    </select>

    <select id="findAll" parameterType="repliesMapperRequest" resultType="replyMapperResponse">
        select
            r.id as id, m.id as member_id, nickname, content, parent_id,
            (select count(id)
             from reply_heart
             where reply_id = r.id)  as heart_count,
            r.created_date as create_date,
            m.image_url as image_url
        from reply r
            left join member m
                on r.member_id = m.id
        where post_id = #{postId} and parent_id = #{parentId} and r.removed = 0
        order by r.id
        offset #{startRow} rows fetch next #{size} rows only
    </select>

    <select id="findAllIfParentIsNull" parameterType="repliesMapperRequest" resultType="replyMapperResponse">
        select
            r.id as id, m.id as member_id, nickname, content, parent_id,
            (select count(id)
             from reply_heart
             where reply_id = r.id)  as heart_count,
            r.created_date as create_date,
            m.image_url as image_url
        from reply r
            left join member m
                on r.member_id = m.id
        where post_id = #{postId} and parent_id is null and r.removed = 0
        order by r.id
        offset #{startRow} rows fetch next #{size} rows only
    </select>

    <insert id="save" parameterType="replyCreateMapperRequest">
        insert into reply (id, content, post_id, member_id, parent_id, depth, created_date, modified_date)
        values (seq_reply_id.nextval, #{content}, #{postId}, #{memberId}, #{parentId}, #{depth}, #{createdDate}, #{createdDate})
        <selectKey keyProperty="id" resultType="long" order="AFTER">
            SELECT seq_reply_id.currval FROM dual
        </selectKey>
    </insert>

    <update id="update" parameterType="replyUpdateMapperRequest">
        update reply
        set content = #{content}, modified_date = #{modifiedDate}
        where id = #{id}
    </update>

    <update id="delete" parameterType="replyDeleteMapperRequest">
        update reply
        set modified_date = #{modifiedDate}, removed = 1
        where id = #{id}
    </update>

    <update id="deleteWithReplies" parameterType="replyDeleteMapperRequest">
        update reply
        set modified_date = #{modifiedDate}, removed = 1
        where id = #{id} or parent_id = #{id}
    </update>
</mapper>
