<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hyundai.hmingle.mapper.PostMapper">
	
	<insert id="save" parameterType="postCreateRequest" >
		INSERT INTO post (id, title, content, member_id, channel_id, read_count, created_date)
		VALUES (SEQ_POST_ID.nextval, #{title}, #{content}, #{memberId}, #{channelId}, 0, sysdate)	
		<selectKey keyColumn="id" resultType="Long" order="AFTER">
			SELECT id
			FROM post
			WHERE 1=1;
		</selectKey>
	</insert>


	<select id="getPostDetail" resultType="com.hyundai.hmingle.mapper.dto.response.PostDetailResponse">
		SELECT t1.*, t2.likes_count
		FROM (
				 SELECT p.id as post_id, p.title, p.content, p.read_count, m.nickname
				 FROM post p, member m
				 WHERE p.member_id=m.id and p.id=#{postId}
			 ) t1
				 LEFT OUTER JOIN (
			SELECT post_id, count(id) as likes_count
			FROM heart
			WHERE removed=0
			GROUP BY post_id
		) t2
	    ON t1.post_id = t2.post_id
	</select>

	<select id="getPostId" statementType="CALLABLE">
		{ call GetPreviousAndNextPostId(
				#{postId, mode=IN, jdbcType=NUMERIC},
				#{previousId, mode=OUT, jdbcType=NUMERIC},
				#{subsequentId, mode=OUT, jdbcType=NUMERIC}
		)}
	</select>

	<update id="removePost" parameterType="postRequest">
		UPDATE post SET removed=1
		WHERE id=#{postId} AND member_id=#{memberId}
		<selectKey keyColumn="id" resultType="Long" order="BEFORE">
			SELECT id
			FROM post
			WHERE post_id=#{postId} AND member_id=#{memberId}
		</selectKey>
	</update>
</mapper>